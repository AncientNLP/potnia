# Test LB.A.1:
# Scenario: Test that blank spaces act as word separators within text in annotated scenarios (except for in specific scenarios, e.g. between a domesticated animal ideogram and a sex indicator).
# Requirements mapping:
    # LB.1-x: Tokenise each blank space (including Unicode '\u00a0') and use to distinguish individual words. Represent as is in both annotated and regularised output. 
        # This should occur in all but the specified exception scenarios (see LB.1-a–d).
    # LB.1-e: If a blank space appears after a domesticated animal ideogram (i.e. EQU, SUS, OVIS, BOS or CAP) and before either a lowercase 'm' 'f' or  'x', then remove the space in both the annotated and regularized outputs.

    "CAP f 130 SUS 17 SUS f 41 BOS m 2 BOS f 4": "𐂈 130 𐁂 17 𐂊 41 𐂍 2 𐂌 4"
    "]SUS x 4 KO 80[" : "]𐁂 4 𐀒 80["

# Test LB.A.2:
# Scenario: Test that hyphens act as sign separators within a word in annotated scenarios.
# Requirements mapping: 
    # LB.2: Tokenise each instance of '-' and use to recognise whole words in encoding, but do not represent this symbol in either the annotated or the regularised output.
    
    "a-ri-to-jo" : "𐀀𐀪𐀵𐀍"

# Test LB.A.3
# Scenario: Test that blank spaces after * and before and after '+' are removed in annotated scenarios.
# Requirements mapping:
    # LB.1-a: If a blank space appears after '*', then remove that space in both the annotated and regularized outputs.
    # LB.1-b: If a blank space appears before/after '+', then remove both those spaces in both the annotated and regularized outputs.

    "]qa-ra / re-me-to * 168 + SE 28" : "]𐀣𐀨 / 𐀩𐀕𐀵 𐂰+𐀮 28"

# Test LB.A.4
# Scenario: Test that '--' is treated the same as as '-' in annotated scenarios.
# Requirements mapping:
    # LB.3: Tokenise each instance of '--' as '-' and use to recognise whole words in encoding, but do not represent this symbol in either the annotated or the regularised output.

    "a-ka--[ ]--jo-jo , me-no-[ da-pu2-ri-[-to-jo ]-po-ti-ni-ja ri *166+WE 22-[" : "𐀀𐀏[ ]𐀍𐀍 , 𐀕𐀜[ 𐀅𐁆𐀪[𐀵𐀍 ]𐀡𐀴𐀛𐀊 𐀪 𐂮+𐀸 22[" # https://liber.cnr.it/tablet/view/124

# Test LB.A.5
# Scenario: Test that ']', '[', ',' and '/' are correctly printed in annotated scenarios.
# Requirements mapping:
    # LB.4: Tokenise each instance of '/'. Represent this symbol as is in the annotated output, but do not include in the regularised output.
    # LB.5: Tokenise each instance of '//'. Represent this symbol as is in the annotated output, but do not include in the regularised output.
    # LB.6: Tokenise each instance of ','. Represent this symbol as is in the annotated output, but do not include in the regularised output.
    # LB.9: Tokenise each instance of '['. Represent this symbol as is in the annotated output, and represent as wildcard (i.e. '%') in regularised output.
    # LB.10: Tokenise each instance of ']'. Represent this symbol as is in the annotated output, and represent as wildcard (i.e. '%') in regularised output.

    "wo-de-wi-jo-jo , / me-no[ // ]ri-jo-de , ko-no , MA 3 ko-ri[ ]2 pa-de-i , ko-no MA 2 KO T 1[ [ ] pa-si-te-o-i , pa-sa-ja , ko-no , [ ] a-mi-ni-so-de , MA 2 KO T 4" : "𐀺𐀆𐀹𐀍𐀍 , / 𐀕𐀜[ // ]𐀪𐀍𐀆 , 𐀒𐀜 , 𐀔 3 𐀒𐀪[ ]2 𐀞𐀆𐀂 , 𐀒𐀜 𐀔 2 𐀒 𐄼 1[ [ ] 𐀞𐀯𐀳𐀃𐀂 , 𐀞𐀭𐀊 , 𐀒𐀜 , [ ] 𐀀𐀖𐀛𐀰𐀆 , 𐀔 2 𐀒 𐄼 4"

# Test LB.A.6
# Scenario: Test that ':' is correctly printed in annotated scenarios.
# Requirements mapping: 
    # LB.7: Tokenise each instance of ':'. Represent this symbol as is in the annotated output, but do not include in the regularised output.

    "a-ta-ti-nu  :  si-wa-[" : "𐀀𐀲𐀴𐀝  :  𐀯𐀷["

# Test LB.A.7
# Scenario: Test that single quotation marks are correctly printed in annotated scenarios.
# Requirements mapping:
    # LB.8: Tokenise each instance of '''. Represent this symbol as is in the annotated output, but do not include in regularised output.

    "]wa VIR 1 MUL 2 'ko-wa 1' ko-wo 1" : "]𐀷 𐂀 1 𐂁 2 '𐀒𐀷 1' 𐀒𐀺 1"

# Test LB.A.8
# Scenario: Test that '\u0323' is not printed in annotated scenarios
# Requirements mapping:
    # LB.11: Ignore each instance of 'X̣' (or '\u0323') in tokenisation. Do not represent this symbol in either the annotated or the regularised output.

    "] ko-wo / m\u0323e\u0323[-zo] 1 ko-wo / me-wi-jo 2 [" : "] 𐀒𐀺 / 𐀕[𐀿] 1 𐀒𐀺 / 𐀕𐀹𐀍 2 ["

# Test LB.A.9
# Scenario: Test that '?' is correctly printed in annoted scenarios.
# Requirements mapping:
    # LB.12: Tokenise each instance of '?'. Represent this symbol as is in the annotated output, but do not include in the regularised output.

    "i[-qi-ja?": "𐀂[𐀥𐀊?"

# Test LB.A.10
# Scenario: Test that \u27e6 and \u27e7 are correctly printed as Scott brackets (i.e. '⟦' and '⟧') in annotated scenarios.
# Requirements mapping:
    # LB.13: Tokenise each instance of Scott brackets (i.e. '⟦' and '⟧', or '\u27e6' and '\u27e7'). Represent these symbols as is in the annotated output. Do not include these symbols, or any other text that they contain, in the reguarised ouput.
       
    "po-*34-wi-do \u27e6TUN\u27e7 BIG[" : "𐀡𐁓𐀹𐀈 ⟦𐂪⟧ 𐃌["

# Test LB.A.11
# Scenario: Test that '<' and '>' are correctly printed in annotated scenarios.
# Requirements mapping:
    # LB.14: Tokenise each instance of angle brackets (i.e. '<' and '>'). Represent this text as is in the annotated output. Do not include these symbols, or any other text that they contain, in the reguarised ouput.
    
    "] <OVIS:m> 69 OVIS:f 30 [ ]-e-ke-me-de , / tu-ni-ja , pa OVIS:m 1" : "] <𐂇> 69 𐂆 30 [ ]𐀁𐀐𐀕𐀆 , / 𐀶𐀛𐀊 , 𐀞 𐂇 1" # https://liber.cnr.it/tablet/view/3172?wl=12765

# Test LB.A.12
# Scenario: Test that lower half brackets (i.e. '⸤' and '⸥', or '\u2e24' and '\u2e25') are correctly printed in annotated scenarios.
# Requirements mapping:
    # LB.15: Tokenise each instance of lower half brackets (i.e. '⸤' and '⸥', or '\u2e24' and '\u2e25'). Represent these symbols as is in the annotated output. Do not include these symbols in the reguarised ouput.
    
    "du-to\u2e24 \u2e25 / r\u0323u\u0323-ki-to" : "𐀉𐀵⸤ ⸥ / 𐀬𐀑𐀵"
    "e-ke-qe ]-o-na-to , ke-ke-me-na⌞ ⌟ko-to-na GRA qs ] vac.": "𐀁𐀐𐀤 ]𐀃𐀙𐀵 , 𐀐𐀐𐀕𐀙⌞ ⌟𐀒𐀵𐀙 𐂎 qs ] vac."

# Test LB.A.13
# Scenario: Test that upper half brackets (i.e. '⌜' and '⌝') are correctly printed in annotated scenarios.
# Requirements mapping
    # LB.16: Tokenise each instance of upper half brackets (i.e. ' ⌜' and '⌝'). Represent these symbols as is in the annotated output. Do not include these symbols in the reguarised ouput.

    "]2 OLIV T 2 ] OLIV T 1 to]-ko-do-mo HORD[ ]Z 3 VIR 20[ pi-ri-e-te-re HORD[ ]Z 3 VIR 5 pa-te-ko-to⌜ ⌝HORD[ ]V 2 [ vacat qa-ra2-te , o[-pi-me-]ne[ ]OLIV 6 pa-ka , o-pi-me-ne , [ OLIV qs pa-te-ko-to , o-pi-me-ne[ ]HORD 1 [ pi-ri-e-te-si , o-pi-me-ne[ ]HORD 1 T 4[ to-ko-do-mo , o-pi-me-ne[ ]HORD 7[ ]5 vac." : "]2 𐂐 𐄼 2 ] 𐂐 𐄼 1 𐀵]𐀒𐀈𐀗 𐂏[ ]𐄿 3 𐂀 20[ 𐀠𐀪𐀁𐀳𐀩 𐂏[ ]𐄿 3 𐂀 5 𐀞𐀳𐀒𐀵 ⌜   ⌝ 𐂏[ ]𐄾 2 [ vacat 𐀣𐁈𐀳 , 𐀃[𐀠𐀕]𐀚[ ]𐂐 6 𐀞𐀏 , 𐀃𐀠𐀕𐀚 , [ 𐂐 qs 𐀞𐀳𐀒𐀵 , 𐀃𐀠𐀕𐀚[ ]𐂏 1 [ 𐀠𐀪𐀁𐀳𐀯 , 𐀃𐀠𐀕𐀚[ ]𐂏 1 𐄼 4[ 𐀵𐀒𐀈𐀗 , 𐀃𐀠𐀕𐀚[ ]𐂏 7[ ]5 vac."

# Test LB.A.14
# Scenario: Test that \u2082 is correctly handled as a subscript '2' in annotated scenarios.
# Requirements mapping:
    # LB.17: Tokenise '\u2082' together with immediately preceding transliterated sign (as long as no hyphen '-' is between them). Confirm that it is treated correctly as a subscript '2', and expected Unicode sign is printed, as per mapping.

    "da-pu\u2082-ri-to-jo , / po-ti-ni-ja 'me-ri' * 209 VAS 1" : "𐀅𐁆𐀪𐀵𐀍 , / 𐀡𐀴𐀛𐀊 '𐀕𐀪' 𐃨 1"

# Test LB.A.15
# Scenario: Test that '\u2083' is correctly handled as a subscript '2' in annotated scenarios
# Requirements mapping:
    # LB.18: Tokenise '\u2083' together with immediately preceding transliterated sign (as long as no hyphen '-' is between them). Confirm that it is treated correctly as a subscript '3', and expected Unicode sign is printed, as per mapping.

    "pu-ri / a\u2083-zo-ro-qe , po-da-ko-qe BOS m ZE 1[" :  "𐀢𐀪 / 𐁁𐀿𐀫𐀤 , 𐀡𐀅𐀒𐀤 𐂍 𐀽 1["

# Test LB.R.16
# Scenario: Test that 'mutila' is correctly printed in annotated scenarios.
# Requirements mapping:
    # LB 19: Tokenise each instance of 'mutila'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "] GRA[ qs mutila" : "] 𐂎[ qs  mutila "

# Test LB.A.17
# Scenario: Test that 'mut' is correctly printed in annotated scenarios.
# Requirements mapping:
    # LB.20: Tokenise each instance of 'mut'. Represent this text as is in the annotated output, but do not include in the regularised output.
    
    "sup. mut. ]vacat [ ]A 5 A [ ]vest.[ inf. mut" : "sup. mut. ]vacat [ ]𐀀 5 𐀀 [ ]vest.[ inf. mut"

# Test LB.A.18
# Scenario: Test that 'sup. mut.', 'inf. mut.' and 'vac.' are correctly printed in annotated scenarios.
# Requirements mapping:
    # LB.21: Tokenise each instance of 'sup.' and 'mut.'. Represent this text as is in the annotated output, but do not include in the regularised output.
    # LB.22: Tokenise each instance of 'inf.' and 'mut.'. Represent this text as is in the annotated output, but do not include in the regularised output.
    # LB.23: Tokenise each instance of 'vac.'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "sup. mut. ] wo[ ] vac. [ inf. mut." : "sup. mut. ] 𐀺[ ] vac. [ inf. mut."

# Test LB.A.19
# Scenario: Test that 'vacat' is correctly printed in annotated scenarios.
# Requirements mapping:
    # LB.24: Tokenise each instance of 'vacat'. Represent this text as is in the annotated output, but do not include in the regularised output.
    
    "] vacat [" : "] vacat ["
    "] vacat v. ] 1" : "] vacat v. ] 1"

# Test LB.A.20
# Scenario: Test that 'vest.' is correctly printed in annotated scenarios, and that Unicode '\u00a0' is treated as a blank space.
# Requirements mapping:
    # LB.1-x: Tokenise each blank space (including Unicode '\u00a0') and use to distinguish individual words. Represent as is in both annotated and regularised output. 
        # This should occur in all but the specified exception scenarios (see LB.1-a–d).
    # LB.25: Tokenise each instance of 'vest.'. Represent this text as is in the annotated output, and represent as wildcard (i.e. '%') in regularised output.

    "] vest ., / su-ri-mo , u-ta-jo-jo , o OVIS m 85[\u00a0] vac ." : "] vest., / 𐀱𐀪𐀗 , 𐀄𐀲𐀍𐀍 , 𐀃 𐂇 85[ ] vac."

# Test LB.R.21
# Scenario: Test that 'vestigia' is correctly printed in annotated scenarios.
# Requirements mapping:
    # LB.26: Tokenise each instance of 'vestigia'. Represent this text as is in the annotated output, and represent as wildcard (i.e. '%') in regularised output.

    "pa-ro , we-u-da-ne-we re-u-ko , a-ko-ro-we-e BOS+SI 2 re[-u-]ko , ma-ra-pi , pe-ko , a-ko-ro-we BOS+SI 1 OVIS:m? ]3 CAP:m 3 WE 3 CAP:m 3 ]vestigia[ ]2 [ ]BOS:x 3 ⟦ ⟧ ] vest. [ ] vest. [ re-u-ko[ ]ma-ra[-pi ]pe-ko , a-ko-ro-we[ OVIS:m 1 CAP:m 1 WE[ ] SUS:x[ ] vacat [ inf. mut." : "𐀞𐀫 , 𐀸𐀄𐀅𐀚𐀸 𐀩𐀄𐀒 , 𐀀𐀒𐀫𐀸𐀁 𐀘+𐀯 2 𐀩[𐀄]𐀒 , 𐀔𐀨𐀠 , 𐀟𐀒 , 𐀀𐀒𐀫𐀸 𐀘+𐀯 1 𐂇? ]3 𐂉 3 𐀸 3 𐂉 3 ]vestigia[ ]2 [ ]𐀘 3 ⟦ ⟧ ] vest. [ ] vest. [ 𐀩𐀄𐀒[ ]𐀔𐀨[𐀠 ]𐀟𐀒 , 𐀀𐀒𐀫𐀸[ 𐂇 1 𐂉 1 𐀸[ ] 𐁂[ ] vacat [ inf. mut."

# Test LB.A.22
# Scenario: Test that 'vestigia?' is correctly printed in annotated scenarios.
# Requirements mapping:
    # LB.27: Tokenise each instance of 'vestigia?'. Represent this text as is in the annotated output, and represent as wildcard (i.e. '%') in regularised output.

    "su-ma-no / ti-ri-to [ vestigia? ] vacat" : "𐀱𐀔𐀜 / 𐀴𐀪𐀵 [ vestigia? ] vacat"

# Test LB.A.23
# Scenario: Test that 'qs' (i.e. 'quantum sufficit') is correctly printed in annoted scenarios.
# Requirements mapping:
    # LB.28: Tokenise each instance of 'qs'. Represent this text as is in the annotated output, but represent as wildcard (i.e. '%') in regularised output.

    "]-ke-ke-me-na-[ , ko-]-to-na GRA qs ] vac." : "]𐀐𐀐𐀕𐀙[ , 𐀒]𐀵𐀙 𐂎 qs ] vac."

# Test LB.A.24
# Scenario: Test that 'fragmentum separatum', 'α', 'β', 'γ' and 'δ'  are correctly printed in annotated scenarios.
# Requirements mapping:
    # LB.29: Tokenise each instance of 'fragmentum separatum'. Represent this text as is in the annotated output, but do not include in the regularised output.
    # LB.53: Tokenise each instance of 'α'. Represent this text as is in the annotated output, but do not include in the regularised output.
    # LB.54: Tokenise each instance of 'β'. Represent this text as is in the annotated output, but do not include in the regularised output.
    # LB.55: Tokenise each instance of 'γ'. Represent this text as is in the annotated output, but do not include in the regularised output.
    # LB.56: Tokenise each instance of 'δ'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "da-we-u[-pi ]a-ko[ da-we-u-pi , a[ da-we-u-pi , ka[ da-we-u-pi , e-[ a3-zo-wo[ da-we[-u-]pi ⌞ ⌟wo[ da-we-u-pi , e-ke[ da-we-u[-pi a-re[ a-zo[ inf. mut. fragmentum separatum α sup. mut. ]  OVIS:f X 15 [ fragmentum separatum β ] , ka[ fragmentum separatum γ sup. mut. ]no-wo[ fragmentum separatum δ sup. mut. ]ma-jo-wo-[ inf. mut." : "𐀅𐀸𐀄[𐀠 ]𐀀𐀒[ 𐀅𐀸𐀄𐀠 , 𐀀[ 𐀅𐀸𐀄𐀠 , 𐀏[ 𐀅𐀸𐀄𐀠 , 𐀁[ , 𐁁𐀿𐀺[ 𐀅𐀸[𐀄]𐀠  ⌞ ⌟𐀺[ 𐀅𐀸𐀄𐀠 , 𐀁𐀐[ 𐀅𐀸𐀄[𐀠 𐀀𐀩[ 𐀀𐀿[ inf. mut. fragmentum separatum α sup. mut. ]  𐂆 X 15 [ fragmentum separatum β ] 𐀏[ fragmentum separatum γ sup. mut. ]𐀜𐀺[ fragmentum separatum δ sup. mut. ]𐀔𐀍𐀺[ inf. mut."

# Test LB.A.25
# Scenario: Test that 'fragmentum A' and 'fragmentum B' are correctly printed in annotated scenarios.
# Requirements mapping:
    # LB.30: Tokenise each instance of 'fragmentum A'. Represent this text as is in the annotated output, but do not include in the regularised output.
    # LB.31: Tokenise each instance of 'fragmentum B'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "fragmentum A fragmentum B vacat [ sup. mut. e-me-si-jo-jo-[ ] 3-[ pa-na-so GRA 100-[ ]-vac.-[ ta-ra-qo GRA [ inf. mut. ta-u-pa-du-we GRA-[ a-ro-ja-[ pu-na-so-[ inf. mut." : "fragmentum A fragmentum B vacat [ sup. mut. 𐀁𐀕𐀯𐀍𐀍[ ] 3[ 𐀞𐀙𐀰 𐂎 100[ ]vac.[ 𐀲𐀨𐀦 𐂎 [ inf. mut. 𐀲𐀄𐀞𐀉𐀸 𐂎[ 𐀀𐀫𐀊[ 𐀢𐀙𐀰[ inf. mut."

# Test LB.A.26
# Scenario: Test that 'fragmentum C' and 'fragmentum D' are correctly printed in annotated scenarios.
# Requirements mapping:
    # LB.32: Tokenise each instance of 'fragmentum C'. Represent this text as is in the annotated output, but do not include in the regularised output.
    # LB.33: Tokenise each instance of 'fragmentum D'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "fragmentum A fragmentum B sup. mut. sup. mut. ]-na 1 i-[ ]so-i-[ ko-wa   1[ ]ku-mi-[•]-du 1[ inf. mut. vac. [ vac. [ fragmentum C fragmentum D sup. mut. sup. mut. ]di-mi[ ]vac. ]*56-za[ ]vac. inf. mut. inf. mut." : "fragmentum A fragmentum B sup. mut. sup. mut. ]𐀙 1 𐀂[ ]𐀰𐀂[ 𐀒𐀷   1[ ]𐀓𐀖[•]𐀉 1[ inf. mut. vac. [ vac. [ fragmentum C fragmentum D sup. mut. sup. mut. ]𐀇𐀖[ ]vac. ]𐁖𐀼[ ]vac. inf. mut. inf. mut."

# Test LB.A.27
# Scenario: Test that 'deest' is correctly printed in annotated scenarios.
# Requirements mapping:
    # LB.34: Tokenise each instance of 'deest'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "sup. mut. ]-deest-[ inf. mut." : "sup. mut. ]deest[ inf. mut."

# Test LB.A.28
# Scenario: Test that 'prior pars sine regulis' and '•' are correctly printed in annotated scenarios.
# Requirements mapping
    # LB.35: Tokenise each instance of 'prior pars sine regulis'. Represent this text as is in the annotated output, but do not include in the regularised output.
    # LB.57: Tokenise each instance of '•'. Represent this text as is in the annotated output, and represent as wildcard (i.e. '%') in regularised output.

    "]-ke-ra2-u-na , e-ra[ ]• po-se-da-o-ne⌞ ⌟re-ko-no 6 [ *146 18[ ] LANA 2 M 2[ A±RE±PA V 4[ ]• 1 OVIS:m 1 OVIS:f 1 CAP:f[ qs SUS+KA 2 SUS:f 4[ ]• 1 FAR T 1 V [ qs VIN 5 TELA [ ] 1 TELA+PA 1 vac. vac. vac. [ ]3[ ]-we-e-a2[ inf. mut. v. prior pars sine regulis ]e-ke-me-de , do[ ]du-ru-wo-qo deest vac. vac. vac. vac. vac. vac." : "]𐀐𐁈𐀄𐀙 , 𐀁𐀨[ ]• 𐀡𐀮𐀅𐀃𐀚⌞ ⌟𐀩𐀒𐀜 6 [ 𐂞 18[ ] 𐂝 2 𐄸 2[ 𐂘 𐄾 4[ ]• 1 𐂇 1 𐂆 1 𐂈[ qs 𐁂+𐀏 2 𐂊 4[ ]• 1 𐀎 𐄼 1 𐄾 [ qs 𐂖 5 𐂧 [ ] 1 𐂧+𐀞 1 vac. vac. vac. [ ]3[ ]𐀸𐀁𐁀[ inf. mut. v. prior pars sine regulis ]𐀁𐀐𐀕𐀆 , 𐀈[ ]𐀉𐀬𐀺𐀦 deest vac. vac. vac. vac. vac. vac."

# Test LB.A.29
# Scenario: Test that 'reliqua pars sine regulis' is correctly printed in annotated scenarios.
# Requirements mapping
    # LB.36: Tokenise each instance of 'reliqua pars sine regulis'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "sup. mut. ]-vest.-[ ]-na-ro GRA 5 ]--do-we-i , ma-so-qe GRA 8 ] vac. ] GRA 402 OLIV+A 52 reliqua pars sine regulis" : "sup. mut. ]vest.[ ]𐀙𐀫 𐂎 5 ]𐀈𐀸𐀂 , 𐀔𐀰𐀤 𐂎 8 ] vac. ] 𐂎 402 𐂐+𐀀 52 reliqua pars sine regulis"

# Test LB.R.30
# Scenario: Test that 'angustum' and '[•~]' are correctly printed in annotated scenarios.
# Requirements mapping
    # LB.37: Tokenise each instance of 'angustum'. Represent this text as is in the annotated output, but do not include in the regularised output.
    # LB.59: Tokenise each instance of '[•~]'. Represent this text as is in the annotated output, and represent a single wildcard (i.e. '%') in regularised output.
    
    "]we-ke , ke-tu-wo-e o-two-we-o , ke-ro-si-ja a3-nu-me-no VIR 1[ o-two-we-o , ke-ro-si-ja qo-te-ro VIR[ 1 o-two-we-o , ke-ro-si-ja , a2-e-ta [VIR 1 o-two-we-o , ke-ro-si-ja , o-du-*56-ro [VIR 1 a-pi-jo-to , ke-ro-si-ja , ku-te-re-u VIR[ 1 a-pi-jo-to , ke-ro-si-ja , o-wo-to VIR 1 a-pi-jo-to , ke-ro-si-ja , a-ra-i-jo VIR 1 a-pi-jo[-to ] ke-ro-si-ja , ri-zo VIR 1 ta-we[-si-jo-]jo , ke-ro-si-ja , wa-[ ] VIR 1 ta-we-si[-jo-]jo , ke-ro-si-ja , [ ] VIR 1 ta-we-si-jo-jo , ke-ro-si-ja [ ]wa-ne-u VIR 1 a-pi-qo[-ta-o] , ke-ro-si-ja , a3-so-ni-jo VIR 1 a[-pi-qo-ta-o ] ke-ro-si-ja , a[ ]te VIR[ 1 ]ke-ro-si-ja , 
    a[ ] VIR 1 ke-ro-]si-ja , [•~]me-ka-[•] VIR 1 a-[ ke-ro-]si-ja , o-pa-[ ]vac.[ VIR 1 vac.[ ] vac. vac. [ ] vac. v. ta-we-si-jo-jo , ke-ro-si-ja , te-wa[ VIR 1 ta-]we-si-jo-jo , ke-ro-si-ja , tu-ru-we-u VIR 1 ] angustum ta-]we-si-jo-jo , ke-ro-si VIR 20 a-pi-qo-ta-o , ke-ro-si-ja VIR 17 a-pi-o-to , ke-ro-si-ja VIR [1]8⌟ o-to-wo[-o ke-]ro-si-ja VIR [1]4 angustum [ ] [ ] ka-ma-e[-we] VIR 10" : 
    "]𐀸𐀐 , 𐀐𐀶𐀺𐀁 𐀃𐁍𐀸𐀃 , 𐀐𐀫𐀯𐀊 𐁁𐀝𐀕𐀜 𐂀 1[ 𐀃𐁍𐀸𐀃 , 𐀐𐀫𐀯𐀊 𐀦𐀳𐀫 𐂀[ 1 𐀃𐁍𐀸𐀃 , 𐀐𐀫𐀯𐀊 , 𐁀𐀁𐀲 [𐂀 1 𐀃𐁍𐀸𐀃 , 𐀐𐀫𐀯𐀊 , 𐀃𐀉𐁖𐀫 [𐂀 1 𐀀𐀠𐀍𐀵 , 𐀐𐀫𐀯𐀊 , 𐀓𐀳𐀩𐀄 𐂀[ 1 𐀀𐀠𐀍𐀵 , 𐀐𐀫𐀯𐀊 , 𐀃𐀺𐀵 𐂀 1 𐀀𐀠𐀍𐀵 , 𐀐𐀫𐀯𐀊 , 𐀀𐀨𐀂𐀍 𐂀 1 𐀀𐀠𐀍[𐀵 ] 𐀐𐀫𐀯𐀊 , 𐀪𐀿 𐂀 1 𐀲𐀸[𐀯𐀍]𐀍 , 𐀐𐀫𐀯𐀊 , 𐀷[ ] 𐂀 1 𐀲𐀸𐀯[𐀍]𐀍 , 𐀐𐀫𐀯𐀊 [ ] 𐂀 1 𐀲𐀸𐀯𐀍𐀍 , 𐀐𐀫𐀯𐀊 [ ]𐀷𐀚𐀄 𐂀 1 𐀀𐀠𐀦[𐀲𐀃] , 𐀐𐀫𐀯𐀊 , 𐁁𐀰𐀛𐀍 𐂀 1 𐀀[𐀠𐀦𐀲𐀃 ] 𐀐𐀫𐀯𐀊 , 𐀀[ ]𐀳 𐂀[ 1 ]𐀐𐀫𐀯𐀊 , 
    𐀀[ ] 𐂀 1 𐀐𐀫]𐀯𐀊 , 𐀕𐀏% 𐂀 1 𐀀% 𐀐𐀫%𐀯𐀊 𐀃𐀞% %% 𐂀 1 % % % % 𐀲𐀸𐀯𐀍𐀍 𐀐𐀫𐀯𐀊 𐀳𐀷% 𐂀 1 𐀲%𐀸𐀯𐀍𐀍 𐀐𐀫𐀯𐀊 𐀶𐀬𐀸𐀄 𐂀 1 % 𐀲%𐀸𐀯𐀍𐀍 𐀐𐀫𐀯 𐂀 20 𐀀𐀠𐀦𐀲𐀃 𐀐𐀫𐀯𐀊 𐂀 17 𐀀𐀠𐀃𐀵 𐀐𐀫𐀯𐀊 𐂀 %1%8 𐀃𐀵𐀺%𐀃 𐀐%𐀫𐀯𐀊 𐂀 %1%4 % % % % 𐀏𐀔𐀁%𐀸% 𐂀 10"


# Test LB.A.10
# Scenario: Check that 'vacat' is correctly printed in annotated scenarios.
# Requirements mapping:
    # LB.17: Tokenise each instance of 'vacat'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "] vacat [" : "] vacat ["   

# Test LB.A.11
# Scenario: Check that 'vest.' is handled as a wildcard, and 'vac.' is printed in annotated scenarios.
# Requirements mapping:
    # LB.16: Tokenise each instance of 'vac.'. Represent this text as is in the annotated output, but do not include in the regularised output.
    # LB.18: Tokenise each instance of 'vest.'. Represent this text as is in the annotated output, and represent as wildcard (i.e. '%') in regularised output.
    # What about '\u00a0'?

    "] vest ., / su-ri-mo , u-ta-jo-jo , o OVIS m 85[\u00a0] vac ." : "] vest., / 𐀱𐀪𐀗 , 𐀄𐀲𐀍𐀍 , 𐀃 𐂇 85[ ] vac."
    # "]-vest.-[ ]-re-po-so [ ka-ri-se-u [VIR 1] wi-je-mo VIR 1 pi-ro-qa-wo-[ qe-te-se-u VIR [1] no-da-ro VIR 1 a-ku-ri-jo-[ vac. [ ]-to-so VIR 7" : "]vest.[ ]𐀩𐀡𐀰 [ 𐀏𐀪𐀮𐀄 [𐂀 1] 𐀹𐀋𐀗 𐂀 1 𐀠𐀫𐀣𐀺[ 𐀤𐀳𐀮𐀄 𐂀 [1] 𐀜𐀅𐀫 𐂀 1 𐀀𐀓𐀪𐀍[ vac. [ ]𐀵𐀰 𐂀 7"

# Test LB.A.13
# Scenario: Check that 'v.' is printed in annotated scenarios.
# Requirements mapping:
    # LB.28: Tokenise each instance of 'v.'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "v." : "v."

# Test LB.A.14
# Scenario: Check that blank spaces are removed before the full stop for 'l .' and 's .', and that the resulting 'l.' and 's.' are not printed in regularized scenarios.
# Requirements mapping:
    # LB.1: Tokenise each blank space and use to distinguish individual words. Represent as is in both annotated and regularised output.
         # The only exceptions to this is if a space appears after '*', before/after '+', or before a '.'  in an annotation (e.g. 'lat .'); spaces in these instances should be removed in both the annotated and regularized outputs.
    # LB.35: Tokenise each instance of 'l.'. Represent this text as is in the annotated output, but do not include in the regularised output.
    # LB.37: Tokenise each instance of 's.'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "l . s .": "l. s."

# Test LB.A.15
# Scenario: Check that 'lat.' and 'inf.' are not printed in regularized scenarios.
# Requirements mapping:
    # LB.36: Tokenise each instance of 'lat.'. Represent this text as is in the annotated output, but do not include in the regularised output.
    # LB.40: Tokenise each instance of 'inf.'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "l\u0323a\u0323t\u0323 . i\u0323n\u0323f\u0323 .": "lat. inf."

# Test LB.A.16
# Scenario: Check that blank spaces are removed before the full stop for 'l .' and 'i .', and that the resulting 'l.' and 'i.' are printed in annotated scenarios.
# Requirements mapping:
    # LB.1: Tokenise each blank space and use to distinguish individual words. Represent as is in both annotated and regularised output.
          # The only exceptions to this is if a space appears after '*', before/after '+', or before a '.'  in an annotation (e.g. 'lat .'); spaces in these instances should be removed in both the annotated and regularized outputs.
    # LB.35: Tokenise each instance of 'l.'. Represent this text as is in the annotated output, but do not include in the regularised output.
    # LB.39: Tokenise each instance of 'i.'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "l . i .": "l. i."

# Test LB.A.17
# Scenario: Check that 'Graffito' is printed in annotated scenarios.
# Requirements mapping:
    # LB.25: Tokenise each instance of 'Graffito'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "] Graffito [": "] Graffito ["

# Test LB.A.19
# Scenario: Check that the space is removed after the '+' sign, and the correct sign is printed in the regularized scenario.
# Requirements mapping:
    # LB.1: Tokenise each blank space and use to distinguish individual words. Represent as is in both annotated and regularised output.
          # The only exceptions to this is if a space appears after '*', before/after '+', or before a '.'  in an annotation (e.g. 'lat .'); spaces in these instances should be removed in both the annotated and regularized outputs.

    "]r\u0323o\u0323 , / da-mo GRA [ ]8 OLIV+ A 12" : "]𐀫 , / 𐀅𐀗 𐂎 [ ]8 𐂐+𐀀 12"

# Test LB.A.21
# Scenario: Check that 'deest' is printed in annotated scenarios.
# Requirements mapping:
    # LB.23: Tokenise each instance of 'deest'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "] deest [" : "] deest ["

# Test LB.A.23
# Scenario: Check that '[•]' is printed in annotated scenarios.
# Requirements mapping:
    # LB.42: Tokenise each instance of '[•]'. Represent this symbol as is in the annotated output, and represent as a single wildcard (i.e. '%') in regularised output.

    "]po-[\u2022] , / [ OVIS m ] 40 o OVIS m 20" : "]𐀡[•] , / [ 𐂇 ] 40 𐀃 𐂇 20"

# Test LB.A.24
# Scenario: Check that spaces are removed before and after '+' and the correct sign/s are printed in annotated scenarios.
# Requirements mapping:
    # LB.1: Tokenise each blank space and use to distinguish individual words. Represent as is in both annotated and regularised output.
        #   The only exceptions to this is if a space appears after '*', before/after '+', after TELA, or before a '.'  in an annotation (e.g. 'lat .'); spaces in these instances should be removed in both the annotated and regularized outputs.

    "ME + RI *211 VAS + PO 1[" : "𐂙 𐃪+𐂓 1["

# Test LB.A.25
# Scenario: Check that spaces are removed after 'TELA' and the correct sign/s are printed in annotated scenarios.
# Requirements mapping:
    # LB.1: Tokenise each blank space and use to distinguish individual words. Represent as is in both annotated and regularised output.
        #   The only exceptions to this is if a space appears after '*', before/after '+', after TELA, or before a '.'  in an annotation (e.g. 'lat .'); spaces in these instances should be removed in both the annotated and regularized outputs.

    "] * 161 TELA 2 [" : "] 𐂩 𐂧² ["

# Test LB.A.26
# Scenario: Check that spaces are removed both after 'TELA' and before and after '+' and the correct sign/s are printed in annotated scenarios.
# Requirements mapping:
    # LB.1: Tokenise each blank space and use to distinguish individual words. Represent as is in both annotated and regularised output.
        #   The only exceptions to this is if a space appears after '*', before/after '+', after TELA, or before a '.'  in an annotation (e.g. 'lat .'); spaces in these instances should be removed in both the annotated and regularized outputs.

    "do-ti-ja TELA 2 + PU 5\u03230[" : "𐀈𐀴𐀊 𐂧²+𐀢 50["

# Test LB.A.27
# Scenario: Check that 'v.↓' is not printed in annotated scenarios.
# Requirements mapping:
    # LB.30: Abbreviated form of verso, indicates the reverse side of the tablet, when inscribed. Arrow indicates direction that record is rotated to reach verso.
    "qe-te-o TELA;2-[ po-po TELA;2 4 [ v.↓ ⟦a-mi-si-ja TELA;1 12⟧ [" : "𐀤𐀳𐀃 𐂧²[ 𐀡𐀡 𐂧² 4 [ v.↓ ⟦𐀀𐀖𐀯𐀊 𐂧¹ 12⟧ ["

# Test LB.U.30
# tokenise 'vest.'
# tokenise 'vac.'
    # "]-vest.-[ ]-re-po-so [ ka-ri-se-u [VIR 1] wi-je-mo VIR 1 pi-ro-qa-wo-[ qe-te-se-u VIR [1] no-da-ro VIR 1 a-ku-ri-jo-[ vac. [ ]-to-so VIR 7" : "]vest.[ ]𐀩𐀡𐀰 [ 𐀏𐀪𐀮𐀄 [𐂀 1] 𐀹𐀋𐀗 𐂀 1 𐀠𐀫𐀣𐀺[ 𐀤𐀳𐀮𐀄 𐂀 [1] 𐀜𐀅𐀫 𐂀 1 𐀀𐀓𐀪𐀍[ vac. [ ]𐀵𐀰 𐂀 7"

# Test LB.U.31
# Scenario: Check that 'fragmentum A' and 'fragmentum B', and checkmarks (i.e. 'X') are printed in annotated scenarios. 
# Requirements mapping:
    # LB.55: ADD DESCRIPTION
    # LB.56: ADD DESCRIPTION

    "fragmentum A sup. mut. ] X MUL 1 ]--u-ra MUL 1 X ]-na MUL 1 tu-ka-na X MUL 1 ]-ma MUL 1 te-qa-ja MUL 1 ]-ja MUL 1-[ ]-ja-mu-ta MUL 1-[ ]--ta2-no-[ inf. mut." : "fragmentum A sup. mut. ] X 𐂁 1 ]𐀄𐀨 𐂁 1 X ]𐀙 𐂁 1 𐀶𐀏𐀙 X 𐂁 1 ]𐀔 𐂁 1 𐀳𐀣𐀊 𐂁 1 ]𐀊 𐂁 1[ ]𐀊𐀘𐀲 𐂁 1[ ]𐁋𐀜[ inf. mut."

# Test LB.U.32
# Scenario: Check that 'v.↓' is printed in annotated scenarios.
# Requirements mapping:
    # LB.31: Tokenise each instance of 'v.→'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "ne-wo , za-we-[ v.→ ] a-ro-we a-nu-to" : "𐀚𐀺 , 𐀼𐀸[ v.→ ] 𐀀𐀫𐀸 𐀀𐀝𐀵"

# Test LB.U.33
# Scenario: Check that '<' and '>' are printed in annotated scenarios.
# Requirements mapping:
    # LB.27: Tokenise each instance of angle brackets (i.e. '<' and '>'). Represent this text as is in the annotated output. Do not include these symbols, or any other text that they contain, in the reguarised ouput.
    "] <OVIS:m> 69 OVIS:f 30 [ ]-e-ke-me-de , / tu-ni-ja , pa OVIS:m 1" : "] <𐂇> 69 𐂆 30 [ ]𐀁𐀐𐀕𐀆 , / 𐀶𐀛𐀊 , 𐀞 𐂇 1" # https://liber.cnr.it/tablet/view/3172?wl=12765
    # "]-o-pe-ro *209VAS 'ME<±RI>' 5 [" : "]𐀃𐀟𐀫 𐃨 𐂙 5" # https://liber.cnr.it/tablet/view/4215?wl=23278

# Test LB.U.34
# Checking mapping of 'ME±RI'
    "]-i-to , / da-nwa ME±RI *209VAS+A 16 *172 8" : "]𐀂𐀵 , / 𐀅𐁅 𐂙 𐃨+𐀀 16 𐂴 8"

# Test LB.U.35
# Checking ' ' signs included
    "pa-si-te-o-i / me-ri *209VAS 1 da-pu2-ri-to-jo , / po-ti-ni-ja 'me-ri' *209VAS 1" : "𐀞𐀯𐀳𐀃𐀂 / 𐀕𐀪 𐃨 1 𐀅𐁆𐀪𐀵𐀍 , / 𐀡𐀴𐀛𐀊 '𐀕𐀪' 𐃨 1"


# Test LB.U.37
# Include erasures '⟦xxx⟧'
# Include lat. inf.
    "] ⟦*209VAS+A 270⟧-[ v.↓ ]-290 KE 200-[ lat. inf. ]-ku-do-ni-jo , [" : "] ⟦𐃨+𐀀 270⟧[ v.↓ ]290 𐀐 200[ lat. inf. ]𐀓𐀈𐀛𐀍 , ["

# Test LB.U.38
# Include 'X'
    "] e-ko-so OVIS:m 100 LANA [ ]-da-ro , / X LANA [ lat. inf. ]-a3 [" : "] 𐀁𐀒𐀰 𐂇 100 𐂝 [ ]𐀅𐀫 , / X 𐂝 [ lat. inf. ]𐁁 ["

# Test LB.U.39
# Test TELAs
    "]-a-ro2-e TELA;3+PU [ ] me-sa-ta , TELA;x+PU-[" : "]𐀀𐁊𐀁 𐂧³+𐀢 [ ] 𐀕𐀭𐀲 , 𐂧ˣ+𐀢["

# Test LB.U.40
# Include ● = 'puncta'
# Include [•~•]
     # https://liber.cnr.it/tablet/view/4230?wl=23478,23481,23485
    "[•~•] [ wi-tu-ri-jo , / a-mo-te-re [" : "[•~•] [ 𐀹𐀶𐀪𐀍 , / 𐀀𐀗𐀳𐀩 ["

# Test LB.U.41
# Ignore '</em>'
# Include 'fragmentum A' and 'fragmentum B'
# Include vacat
    "fragmentum A fragmentum B sup. mut. sup. mut.</em> ]--to-[ ]-da-*22-to HORD [ ] 'da-*22-to' HORD 2 da-]-*22-to HORD-[ ]--ro 'da-*22-to' HORD 2 inf. mut. ]--ri 'da-*22-to' HORD 2 ] vac. inf. mut." : "fragmentum A fragmentum B sup. mut. sup. mut. ]𐀵[ ]𐀅𐁒𐀵 𐂏 [ ] '𐀅𐁒𐀵' 𐂏 2 𐀅]𐁒𐀵 𐂏[ ]𐀫 '𐀅𐁒𐀵' 𐂏 2 inf. mut. ]𐀪 '𐀅𐁒𐀵' 𐂏 2 ] vac. inf. mut."
    "fragmentum A fragmentum B vacat [ sup. mut. e-me-si-jo-jo-[ ] 3-[ pa-na-so GRA 100-[ ]-vac.-[ ta-ra-qo GRA [ inf. mut. ta-u-pa-du-we GRA-[ a-ro-ja-[ pu-na-so-[ inf. mut." : "fragmentum A fragmentum B vacat [ sup. mut. 𐀁𐀕𐀯𐀍𐀍[ ] 3[ 𐀞𐀙𐀰 𐂎 100[ ]vac.[ 𐀲𐀨𐀦 𐂎 [ inf. mut. 𐀲𐀄𐀞𐀉𐀸 𐂎[ 𐀀𐀫𐀊[ 𐀢𐀙𐀰[ inf. mut."

# Test LB.U.44
# Mid-word ']'
    "po-]-ki-ro-nu-ka , '*161' TELA;2 3 ki-ri-ta , / e-ru-ta-ra-pi , *161 TELA;3 [ ] e-ru-ta-ra-pi [ ]-TELA;x 2 ke-ro-ta , / *161 ki-to-na TELA;x-[" : "𐀡]𐀑𐀫𐀝𐀏 , '𐂩' 𐂧² 3 𐀑𐀪𐀲 , / 𐀁𐀬𐀲𐀨𐀠 , 𐂩 𐂧³ [ ] 𐀁𐀬𐀲𐀨𐀠 [ ]𐂧ˣ 2 𐀐𐀫𐀲 , / 𐂩 𐀑𐀵𐀙 𐂧ˣ["

# Test LB.U.45
# Test 'o'
    "]-jo-zo CROC P 3 o P 6-[" : "]𐀍𐀿 𐁉 𐄺 3 𐀃 𐄺 6["

# Test LB.U.46
# Include 'reliqua pars sine regulis'
    "sup. mut. ]-vest.-[ ]-na-ro GRA 5 ]--do-we-i , ma-so-qe GRA 8 ] vac. ] GRA 402 OLIV+A 52 reliqua pars sine regulis" : "sup. mut. ]vest.[ ]𐀙𐀫 𐂎 5 ]𐀈𐀸𐀂 , 𐀔𐀰𐀤 𐂎 8 ] vac. ] 𐂎 402 𐂐+𐀀 52 reliqua pars sine regulis"

# Test LB.U.47
# Include 'supra sigillum'
    "RU supra sigillum" : "𐀬 supra sigillum"

# Test LB.U.48
# Update rules
# Closed sqaure brackets with text inside and no spaces are ignored, e.g. '[•~•~•~•]' becomes '%%%%' and [o-]-pi becomes '𐀃𐀠'
# However, square brackets that are not closed/have spaces between, are still treated as wildcards 'i-[-jo ]-wo' becomes '𐀂%𐀍 %𐀺', and 'a-[ ]' becomes '𐀀% %' 
# Complicated text because of annotations (mainly 'ijo')
# https://liber.cnr.it/tablet/view/697
    "sup. mut. ] i-[-jo ]-wo , a-[ ] wa-du-na , [•~•~•~•] ]--to , e-[ ] vac. ]-sa-ka-ri-jo , [ ] vac. i-jo i-jo [o-]-pi / di-zo , pi-ma-na-ro , zo-wi-jo 1 a-tu-qo-te-ra-to 1-[ i-jo o-pi / ri-zo , pi-ma-na-ro pi-ro-i-ta 1 o-pi / pa-ka , di-wa-jo 1 ]-pi / o-na-se-u 1 ri--[ ]-wi-du 1 ke--[ ]-za-[ inf. mut." : "sup. mut. ] 𐀂[𐀍 ]𐀺 , 𐀀[ ] 𐀷𐀉𐀙 , [•~•~•~•] ]𐀵 , 𐀁[ ] vac. ]𐀭𐀏𐀪𐀍 , [ ] vac. 𐀂𐀍 𐀂𐀍 [𐀃]𐀠 / 𐀇𐀿 , 𐀠𐀔𐀙𐀫 , 𐀿𐀹𐀍 1 𐀀𐀶𐀦𐀳𐀨𐀵 1[ 𐀂𐀍 𐀃𐀠 / 𐀪𐀿 , 𐀠𐀔𐀙𐀫 𐀠𐀫𐀂𐀲 1 𐀃𐀠 / 𐀞𐀏 , 𐀇𐀷𐀍 1 ]𐀠 / 𐀃𐀙𐀮𐀄 1 𐀪[ ]𐀹𐀉 1 𐀐[ ]𐀼[ inf. mut."

# Test LB.U.49
# Include 'α', 'β', 'γ', 'supra sigillum'
    "α JAC supra sigillum β o-pa γ pa-ta-ja" : "α 𐃘 supra sigillum β 𐀃𐀞 γ 𐀞𐀲𐀊"

# Test LB.U.50
    # HELP
#    "sup. mut. ?OVIS]-:m ["
#    "]-si 1 tu 1 ki-zo 1 MUL 3 TELA-[;1+TE ]-a-ma-no--[ ]-1 o-ri-mo MUL 3 TELA;1+TE 1 pu-zo , ti-no , pi-ja-mu-nu MUL-[ ]-ni-ta , o-sa-po-to MUL 3 TELA-[;1]-+TE 1 [ ] vac. ["

# Test LB.U.51
# include CMS seal impression annotations e.g. 'CMS VS1B 049' >> This is the only case.
    "α A supra sigillum CMS VS1B 049 β a-pe-we-de" : "α 𐀀 supra sigillum CMS VS1B 049 β 𐀀𐀟𐀸𐀆"

# Test LB.U.52
# Include 'deest'
    "sup. mut. ]-deest-[ inf. mut." : "sup. mut. ]deest[ inf. mut."

# Test LB.U.53
    "HORD T 1 NI V 3 FAR V 2 VIN V 2 a-ro-do-ro-o , / wa-ke-ta , HORD T 1 NI V 3 OLE V 1 v.↓ ME±RI Z 2" : "𐂏 𐄼 1 𐀛 𐄾 3 𐀎 𐄾 2 𐂖 𐄾 2 𐀀𐀫𐀈𐀫𐀃 , / 𐀷𐀐𐀲 , 𐂏 𐄼 1 𐀛 𐄾 3 𐂕 𐄾 1 v.↓ 𐂙 𐄿 2"

# Test LB.U.54
    # Include qs (quantum sufficit)
    "]-ke-ke-me-na-[ , ko-]-to-na GRA qs ] vac." : "]𐀐𐀐𐀕𐀙[ , 𐀒]𐀵𐀙 𐂎 qs ] vac."

# Test LB.U.55
# Include ⌞ and ⌟
    "e-ke-qe ]-o-na-to , ke-ke-me-na⌞ ⌟ko-to-na GRA qs ] vac.": "𐀁𐀐𐀤 ]𐀃𐀙𐀵 , 𐀐𐀐𐀕𐀙⌞ ⌟𐀒𐀵𐀙 𐂎 qs ] vac."


