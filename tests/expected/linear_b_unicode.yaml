# Test LB.A.1:
# Scenario: Test that hyphens act as sign separators within a word in annotated scenarios.
# Requirements mapping: 
    # LB.2: Tokenise each instance of '-' and use to recognise whole words in encoding, but do not represent this symbol in either the annotated or the regularised output.
    
    "a-ri-to-jo" : "𐀀𐀪𐀵𐀍"

# Test LB.A.2:
# Scenario: Test that blank spaces act as word separators within text in annotated scenarios.
# Requirements mapping: 
    # LB.1: Tokenise each blank space and use to distinguish individual words. Represent as is in both annotated and regularised output.
        #   The only exceptions to this is if a space appears after '*', before/after '+', or before a '.'  in an annotation (e.g. 'lat .'); spaces in these instances should be removed in both the annotated and regularized outputs.
    "a-ri-to-jo a-ri-to-jo" : "𐀀𐀪𐀵𐀍 𐀀𐀪𐀵𐀍"

# Test LB.A.3
# Scenario: Test that ']', '[', ',' and '/' are correctly printed in annotated scenarios.
# Requirements mapping:
    # LB.4: Tokenise each instance of '/'. Represent this symbol as is in the annotated output, but do not include in the regularised output.
    # LB.6: Tokenise each instance of ','. Represent this symbol as is in the annotated output, but do not include in the regularised output.
    # LB.8: Tokenise each instance of '['. Represent this symbol as is in the annotated output, and represent as wildcard (i.e. '%') in regularised output.
    # LB.9: Tokenise each instance of ']'. Represent this symbol as is in the annotated output, and represent as wildcard (i.e. '%') in regularised output.

    "]ra-ma-na , / e-ne-ra MUL[" : "]𐀨𐀔𐀙 , / 𐀁𐀚𐀨 𐂁["

# Test LB.A.4
# Scenario: Test that '\u0323' is correctly printed in annotated scenarios
# Requirements mapping:
    # LB.10: Ignore each instance of 'X̣' (or '\u0323') in tokenisation. Do not represent this symbol in either the annotated or the regularised output.

    "] ko-wo / m\u0323e\u0323[-zo] 1 ko-wo / me-wi-jo 2 [" : "] 𐀒𐀺 / 𐀕[𐀿] 1 𐀒𐀺 / 𐀕𐀹𐀍 2 ["

# Test LB.A.5
# Scenario: Test that single quotation marks are correctly printed in annotated scenarios.
# Requirements mapping:
    # LB.7: Tokenise each instance of '''. Represent this symbol as is in the annotated output, but do not include in regularised output.

    "]wa VIR 1 MUL 2 'ko-wa 1' ko-wo 1": "]𐀷 𐂀 1 𐂁 2 '𐀒𐀷 1' 𐀒𐀺 1"

# Test LB.A.6
# Scenario: Check that blank spaces after * and before and after '+' are removed in annotated scenarios.
# Requirements mapping:
    # LB.1: Tokenise each blank space and use to distinguish individual words. Represent as is in both annotated and regularised output.
        #   The only exceptions to this is if a space appears after '*', before/after '+', or before a '.'  in an annotation (e.g. 'lat .'); spaces in these instances should be removed in both the annotated and regularized outputs.

    "]qa-ra / re-me-to * 168 + SE 28" : "]𐀣𐀨 / 𐀩𐀕𐀵 𐂰+𐀮 28"

# Test LB.A.7
# Scenario: Check that \u2082 is correctly handled as a subscript '2' in annotated scenarios.
# Requirements mapping:
    # ADD REQUIREMENT

    "da-pu\u2082-ri-to-jo , / po-ti-ni-ja 'me-ri' * 209 VAS 1" : "𐀅𐁆𐀪𐀵𐀍 , / 𐀡𐀴𐀛𐀊 '𐀕𐀪' 𐃨 1"

# Test LB.A.8
# Scenario: Test that \u27e6 and \u27e7 are correctly handled as Scott brackets in annotated scenarios.
# Requirements mapping:
    # LB.12: Tokenise each instance of Scott brackets (i.e. '⟦' and '⟧', or '\u27e6' and '\u27e7'). Represent these symbols as is in the annotated output. Do not include these symbols, or any other text that they contain, in the reguarised ouput.
       
    "po-*34-wi-do \u27e6TUN\u27e7 BIG[" : "𐀡𐁓𐀹𐀈 ⟦𐂪⟧ 𐃌[" #TC if we want all characters to appear.
    # "po-*34-wi-do \u27e6TUN\u27e7 BIG[" : "𐀡𐁓𐀹𐀈 𐃌%" #TC if we only want to output syllabograms, logograms, spaces and numbers, and indicate uncertain signs.

# Test LB.U.11

    "inf . mut ." : "inf. mut." #TC if we want all characters to appear.
    # "inf . mut ." : "" #TC if we only want to output syllabograms, logograms, spaces and numbers, and indicate uncertain signs.
 
# Test LB.U.11

    "] vacat [" : "] vacat [" #TC if we want all characters to appear.   
    # "] vacat [" : "% %" #TC if we only want to output syllabograms, logograms, spaces and numbers, and indicate uncertain signs.

# Test LB.U.11

    "] vest ., / su-ri-mo , u-ta-jo-jo , o OVIS m 85[\u00a0] vac ." : "] vest., / 𐀱𐀪𐀗 , 𐀄𐀲𐀍𐀍 , 𐀃 𐂇 85[ ] vac." #TC if we want all characters to appear.  
    # "] vest ., / su-ri-mo , u-ta-jo-jo , o OVIS m 85[\u00a0] vac ." : "% % 𐀱𐀪𐀗 𐀄𐀲𐀍𐀍 𐀃 𐂇 85% %" #TC if we only want to output syllabograms, logograms, spaces and numbers, and indicate uncertain signs.

# Test LB.U.12

    "su-ma-no / ti-ri-to [ vestigia? ] vacat" : "𐀱𐀔𐀜 / 𐀴𐀪𐀵 [ vestigia? ] vacat"
    # "su-ma-no / ti-ri-to [ vestigia? ] vacat" : "𐀱𐀔𐀜 𐀴𐀪𐀵 % % %"

# Test LB.U.13

    "]EQU [" : "]𐂃 ["
    # "]EQU [" : "%𐂃 %"

# Test LB.U.14

    "v." : "v."
    # "v." : ""

# Test LB.U.15

    "l . s .": "l. s."
    # "l . s .": ""

# Test LB.U.16

    "l\u0323a\u0323t\u0323 . i\u0323n\u0323f\u0323 .": "lat. inf."
    # "l\u0323a\u0323t\u0323 . i\u0323n\u0323f\u0323 .": ""

# Test LB.U.17

    "l . i .": "l. i."
    # "l . i .": ""

# Test LB.U.18

    "] Graffito [": "] Graffito ["
    # "] Graffito [": ""

# Test LB.U.19

    "CAP f 130 SUS 17 SUS f 41 BOS m 2 BOS f 4": "𐂈 130 𐁂 17 𐂊 41 𐂍 2 𐂌 4" #Same outcome in both scenarios
    # "CAP f 130 SUS 17 SUS f 41 BOS m 2 BOS f 4": "𐂈 130 𐁂 17 𐂊 41 𐂍 2 𐂌 4"

# Test LB.U.20

    "i[-qi-ja?": "𐀂[𐀥𐀊?"
    # "i[-qi-ja?": "𐀂%𐀥𐀊"


# Test LB.U.21

    "]r\u0323o\u0323 , / da-mo GRA [ ]8 OLIV+ A 12" : "]𐀫 , / 𐀅𐀗 𐂎 [ ]8 𐂐+𐀀 12" #TC if we want all characters to appear.
    # "]r\u0323o\u0323 , / da-mo GRA [ ]8 OLIV+ A 12" : "%𐀫 𐀅𐀗 𐂎 % %8 𐂐+𐀀 12" #TC if we only want to output syllabograms, logograms, spaces and numbers, and indicate uncertain signs.

# Test LB.U.22

    "pu-ri / a\u2083-zo-ro-qe , po-da-ko-qe BOS m ZE 1[" :  "𐀢𐀪 / 𐁁𐀿𐀫𐀤 , 𐀡𐀅𐀒𐀤 𐂍 𐀽 1[" #TC if we want all characters to appear.
    # "pu-ri / a\u2083-zo-ro-qe , po-da-ko-qe BOS m ZE 1[" :  "𐀢𐀪 𐁁𐀿𐀫𐀤 𐀡𐀅𐀒𐀤 𐂍 𐀽 1%" #TC if we only want to output syllabograms, logograms, spaces and numbers, and indicate uncertain signs.


# Add missing scenarios

# Test LB.U.29
# tokenise 'v.↓'
    "qe-te-o TELA;2-[ po-po TELA;2 4 [ v.↓ ⟦a-mi-si-ja TELA;1 12⟧ [" : "𐀤𐀳𐀃 𐂧²[ 𐀡𐀡 𐂧² 4 [ v.↓ ⟦𐀀𐀖𐀯𐀊 𐂧¹ 12⟧ ["

# Test LB.U.30
# tokenise 'vest.'
# tokenise 'vac.'
    # "]-vest.-[ ]-re-po-so [ ka-ri-se-u [VIR 1] wi-je-mo VIR 1 pi-ro-qa-wo-[ qe-te-se-u VIR [1] no-da-ro VIR 1 a-ku-ri-jo-[ vac. [ ]-to-so VIR 7" : "]vest.[ ]𐀩𐀡𐀰 [ 𐀏𐀪𐀮𐀄 [𐂀 1] 𐀹𐀋𐀗 𐂀 1 𐀠𐀫𐀣𐀺[ 𐀤𐀳𐀮𐀄 𐂀 [1] 𐀜𐀅𐀫 𐂀 1 𐀀𐀓𐀪𐀍[ vac. [ ]𐀵𐀰 𐂀 7"

# Test LB.U.31
# tokenise 'fragmentum'
# tokenise 'sup. mut.'
# tokenise 'inf. mut.'
# tokenise 'X' or 'x' = check-mark
    "fragmentum A sup. mut. ] X MUL 1 ]--u-ra MUL 1 X ]-na MUL 1 tu-ka-na X MUL 1 ]-ma MUL 1 te-qa-ja MUL 1 ]-ja MUL 1-[ ]-ja-mu-ta MUL 1-[ ]--ta2-no-[ inf. mut." : "fragmentum A sup. mut. ] X 𐂁 1 ]𐀄𐀨 𐂁 1 X ]𐀙 𐂁 1 𐀶𐀏𐀙 X 𐂁 1 ]𐀔 𐂁 1 𐀳𐀣𐀊 𐂁 1 ]𐀊 𐂁 1[ ]𐀊𐀘𐀲 𐂁 1[ ]𐁋𐀜[ inf. mut."

# Test LB.U.32
# tokenise 'v.→'
    "ne-wo , za-we-[ v.→ ] a-ro-we a-nu-to" : "𐀚𐀺 , 𐀼𐀸[ v.→ ] 𐀀𐀫𐀸 𐀀𐀝𐀵"

# Test LB.U.33
# tokenise '<' and ''>'
# second scenario won't be handled correctly
    # "] <OVIS:m> 69 OVIS:f 30 [ ]-e-ke-me-de , / tu-ni-ja , pa OVIS:m 1" : "] <𐂇> 69 𐂆 30 [ ]𐀁𐀐𐀕𐀆 , / 𐀶𐀛𐀊 , 𐀞 𐂇 1" # https://liber.cnr.it/tablet/view/3172?wl=12765
    # "]-o-pe-ro *209VAS 'ME<±RI>' 5 [" : "]𐀃𐀟𐀫 𐃨 𐂙 5" # https://liber.cnr.it/tablet/view/4215?wl=23278

# Test LB.U.34
# Checking mapping of 'ME±RI'
    "]-i-to , / da-nwa ME±RI *209VAS+A 16 *172 8" : "]𐀂𐀵 , / 𐀅𐁅 𐂙 𐃨+𐀀 16 𐂴 8"

# Test LB.U.35
# Checking ' ' signs included
    "pa-si-te-o-i / me-ri *209VAS 1 da-pu2-ri-to-jo , / po-ti-ni-ja 'me-ri' *209VAS 1" : "𐀞𐀯𐀳𐀃𐀂 / 𐀕𐀪 𐃨 1 𐀅𐁆𐀪𐀵𐀍 , / 𐀡𐀴𐀛𐀊 '𐀕𐀪' 𐃨 1"

# Test LB.U.36
# Treat '--' as '-'
    "a-ka--[ ]--jo-jo , me-no-[ da-pu2-ri-[-to-jo ]-po-ti-ni-ja ri *166+WE 22-[" : "𐀀𐀏[ ]𐀍𐀍 , 𐀕𐀜[ 𐀅𐁆𐀪[𐀵𐀍 ]𐀡𐀴𐀛𐀊 𐀪 𐂮+𐀸 22[" # https://liber.cnr.it/tablet/view/124

# Test LB.U.37
# Include erasures '⟦xxx⟧'
# Include lat. inf.
    "] ⟦*209VAS+A 270⟧-[ v.↓ ]-290 KE 200-[ lat. inf. ]-ku-do-ni-jo , [" : "] ⟦𐃨+𐀀 270⟧[ v.↓ ]290 𐀐 200[ lat. inf. ]𐀓𐀈𐀛𐀍 , ["

# Test LB.U.38
# Include 'X'
    "] e-ko-so OVIS:m 100 LANA [ ]-da-ro , / X LANA [ lat. inf. ]-a3 [" : "] 𐀁𐀒𐀰 𐂇 100 𐂝 [ ]𐀅𐀫 , / X 𐂝 [ lat. inf. ]𐁁 ["

# Test LB.U.39
# Test TELAs
    "]-a-ro2-e TELA;3+PU [ ] me-sa-ta , TELA;x+PU-[" : "]𐀀𐁊𐀁 𐂧³+𐀢 [ ] 𐀕𐀭𐀲 , 𐂧ˣ+𐀢["

# Test LB.U.40
# Include ● = 'puncta'
# Include [•~•]
     # https://liber.cnr.it/tablet/view/4230?wl=23478,23481,23485
    "[•~•] [ wi-tu-ri-jo , / a-mo-te-re [" : "[•~•] [ 𐀹𐀶𐀪𐀍 , / 𐀀𐀗𐀳𐀩 ["

# Test LB.U.41
# Ignore '</em>'
# Include 'fragmentum A' and 'fragmentum B'
# Include vacat
    "fragmentum A fragmentum B sup. mut. sup. mut.</em> ]--to-[ ]-da-*22-to HORD [ ] 'da-*22-to' HORD 2 da-]-*22-to HORD-[ ]--ro 'da-*22-to' HORD 2 inf. mut. ]--ri 'da-*22-to' HORD 2 ] vac. inf. mut." : "fragmentum A fragmentum B sup. mut. sup.mut. sup. mut. ]𐀵[ ]𐀅𐁒𐀵 𐂏 [ ] '𐀅𐁒𐀵' 𐂏 2 𐀅]𐁒𐀵 𐂏[ ]𐀫 '𐀅𐁒𐀵' 𐂏 2 inf. mut. ]𐀪 '𐀅𐁒𐀵' 𐂏 2 ] vac. inf. mut."
    "fragmentum A fragmentum B vacat [ sup. mut. e-me-si-jo-jo-[ ] 3-[ pa-na-so GRA 100-[ ]-vac.-[ ta-ra-qo GRA [ inf. mut. ta-u-pa-du-we GRA-[ a-ro-ja-[ pu-na-so-[ inf. mut." : "fragmentum A fragmentum B vacat [ sup. mut. 𐀁𐀕𐀯𐀍𐀍[ ] 3[ 𐀞𐀙𐀡 𐂎 100[ ]vac.[ 𐀲𐀨𐀦 𐂎 [ inf. mut. 𐀲𐀄𐀞𐀉𐀸 𐂎[ 𐀀𐀫𐀊[ 𐀢𐀙𐀰[ inf. mut."

# Test LB.U.44
# Mid-word ']'
    "po-]-ki-ro-nu-ka , '*161' TELA;2 3 ki-ri-ta , / e-ru-ta-ra-pi , *161 TELA;3 [ ] e-ru-ta-ra-pi [ ]-TELA;x 2 ke-ro-ta , / *161 ki-to-na TELA;x-[" : "𐀡]𐀑𐀫𐀝𐀏 , '𐂩' 𐂧² 3 𐀑𐀪𐀲 𐀁𐀬𐀲𐀨𐀠 , / 𐂩 𐂧³ [ ] 𐀁𐀬𐀲𐀨𐀠 [ ]𐂧ˣ 2 𐀐𐀫𐀲 , / 𐂩 𐀑𐀵𐀙 𐂧ˣ["

# Test LB.U.45
# Test 'o'
    "]-jo-zo CROC P 3 o P 6-[" : "]𐀍𐀿 𐁉 𐄺 3 𐀃 𐄺 6["

# Test LB.U.46
# Include 'reliqua pars sine regulis'
    "sup. mut. ]-vest.-[ ]-na-ro GRA 5 ]--do-we-i , ma-so-qe GRA 8 ] vac. ] GRA 402 OLIV+A 52 reliqua pars sine regulis" : "sup. mut. ]vest.[ ]𐀙𐀫 𐂎 5 ]𐀈𐀸𐀂 , 𐀔𐀰𐀤 𐂎 8 ] vac. ] 𐂎 402 𐂐+𐀀 52 reliqua pars sine regulis"

# Test LB.U.47
# Include 'supra sigillum'
    "RU supra sigillum" : "𐀬 supra sigillum"

# Test LB.U.48
# Update rules
# Closed sqaure brackets with text inside and no spaces are ignored, e.g. '[•~•~•~•]' becomes '%%%%' and [o-]-pi becomes '𐀃𐀠'
# However, square brackets that are not closed/have spaces between, are still treated as wildcards 'i-[-jo ]-wo' becomes '𐀂%𐀍 %𐀺', and 'a-[ ]' becomes '𐀀% %' 
# Complicated text because of annotations (mainly 'ijo')
# https://liber.cnr.it/tablet/view/697
    "sup. mut. ] i-[-jo ]-wo , a-[ ] wa-du-na , [•~•~•~•] ]--to , e-[ ] vac. ]-sa-ka-ri-jo , [ ] vac. i-jo i-jo [o-]-pi / di-zo , pi-ma-na-ro , zo-wi-jo 1 a-tu-qo-te-ra-to 1-[ i-jo o-pi / ri-zo , pi-ma-na-ro pi-ro-i-ta 1 o-pi / pa-ka , di-wa-jo 1 ]-pi / o-na-se-u 1 ri--[ ]-wi-du 1 ke--[ ]-za-[ inf. mut." : "sup. mut. ] 𐀂[𐀍 ]𐀺 , 𐀀[ ] 𐀷𐀉𐀙 , [•~•~•~•] ]𐀵 e[ ] vac. ]𐀭𐀏𐀪𐀍 ,  [ ] vac. 𐀂𐀍 𐀂𐀍 [𐀃]𐀠 / 𐀇𐀿 , 𐀠𐀔𐀙𐀫 , 𐀿𐀹𐀍 1 𐀀𐀶𐀦𐀳𐀨𐀵 1[ 𐀂𐀍 𐀃𐀠 / 𐀪𐀿 , 𐀠𐀔𐀙𐀫 𐀠𐀫𐀂𐀲 1 𐀃𐀠 / 𐀞𐀏 , 𐀇𐀷𐀍 1 ]𐀠 / 𐀃𐀙𐀮𐀄 1 𐀪[ ]𐀹𐀉 1 𐀐[ ]𐀼[ inf. mut."

# Test LB.U.49
# Include 'α', 'β', 'γ', 'supra sigillum'
    "α JAC supra sigillum β o-pa γ pa-ta-ja" : "α 𐃘 supra sigillum β 𐀃𐀞 γ 𐀞𐀲𐀊"

# Test LB.U.50
    # HELP
#    "sup. mut. ?OVIS]-:m ["
#    "]-si 1 tu 1 ki-zo 1 MUL 3 TELA-[;1+TE ]-a-ma-no--[ ]-1 o-ri-mo MUL 3 TELA;1+TE 1 pu-zo , ti-no , pi-ja-mu-nu MUL-[ ]-ni-ta , o-sa-po-to MUL 3 TELA-[;1]-+TE 1 [ ] vac. ["

# Test LB.U.51
# include CMS seal impression annotations e.g. 'CMS VS1B 049' >> This is the only case.
    "α A supra sigillum CMS VS1B 049 β a-pe-we-de" : "α 𐀀 supra sigillum CMS VS1B 049 β 𐀀𐀟𐀸𐀆"

# Test LB.U.52
# Include 'deest'
    "sup. mut. ]-deest-[ inf. mut." : "sup. mut. ]-deest-[ inf. mut."

# Test LB.U.53
    "HORD T 1 NI V 3 FAR V 2 VIN V 2 a-ro-do-ro-o , / wa-ke-ta , HORD T 1 NI V 3 OLE V 1 v.↓ ME±RI Z 2" : "𐂏 𐄼 1 𐀛 𐄾 3 𐀎 𐄾 2 𐂖 𐄾 2 𐀀𐀫𐀈𐀫𐀃 , / 𐀷𐀐𐀲 , 𐂏 𐄼 1 𐀛 𐄾 3 𐂕 𐄾 1 v.↓ 𐂙 𐄿 2"

# Test LB.U.54
    # Include qs (quantum sufficit)
    "]-ke-ke-me-na-[ , ko-]-to-na GRA qs ] vac." : "]𐀐𐀐𐀕𐀙[ , 𐀒]𐀵𐀙 𐂎 qs ] vac."

# Test LB.U.55
# Include ⌞ and ⌟
    "e-ke-qe ]-o-na-to , ke-ke-me-na⌞ ⌟ko-to-na GRA qs ] vac.": "𐀁𐀐𐀤 ]𐀃𐀙𐀵 , 𐀐𐀐𐀕𐀙⌞ ⌟𐀒𐀵𐀙 𐂎 qs ] vac."


