# Test LB.R.1:
# Scenario: Test that hyphens act as sign separators within a word in regularized scenarios.
# Requirements mapping: 
    # LB.2: Tokenise each instance of '-' and use to recognise whole words in encoding, but do not represent this symbol in either the annotated or the regularised output.

    "a-ri-to-jo" : "𐀀𐀪𐀵𐀍"

# Test LB.R.2:
# Scenario: Test that blank spaces act as word separators within text in regularized scenarios.
# Requirements mapping:
    # LB.1: Tokenise each blank space and use to distinguish individual words. Represent as is in both annotated and regularised output.
        #   The only exceptions to this is if a space appears after '*', before/after '+', or before a '.'  in an annotation (e.g. 'lat .'); spaces in these instances should be removed in both the annotated and regularized outputs.

    "CAP f 130 SUS 17 SUS f 41 BOS m 2 BOS f 4": "𐂈 130 𐁂 17 𐂊 41 𐂍 2 𐂌 4"

# Test LB.R.3
# Scenario: Test that ']' and '[' are handled as wildcards in regularized scenarios, and that ',' and '/' are not printed.
# Requirements mapping:
    # LB.4: Tokenise each instance of '/'. Represent this symbol as is in the annotated output, but do not include in the regularised output.
    # LB.6: Tokenise each instance of ','. Represent this symbol as is in the annotated output, but do not include in the regularised output.
    # LB.8: Tokenise each instance of '['. Represent this symbol as is in the annotated output, and represent as wildcard (i.e. '%') in regularised output.
    # LB.9: Tokenise each instance of ']'. Represent this symbol as is in the annotated output, and represent as wildcard (i.e. '%') in regularised output.

    "]ra-ma-na , / e-ne-ra MUL[" : "%𐀨𐀔𐀙 𐀁𐀚𐀨 𐂁%"

# Test LB.R.4
# Scenario: Test that '\u0323' is not printed in regularized scenarios
# Requirements mapping:
    # LB.10: Ignore each instance of 'X̣' (or '\u0323') in tokenisation. Do not represent this symbol in either the annotated or the regularised output.

    "] ko-wo / m\u0323e\u0323[-zo] 1 ko-wo / me-wi-jo 2 [" : "% 𐀒𐀺 𐀕%𐀿% 1 𐀒𐀺 𐀕𐀹𐀍 2 %"

# Test LB.R.5
# Scenario: Test that single quotation marks are not printed in regularized scenarios.
# Requirements mapping:
    # LB.7: Tokenise each instance of '''. Represent this symbol as is in the annotated output, but do not include in regularised output.

    "]wa VIR 1 MUL 2 'ko-wa 1' ko-wo 1": "%𐀷 𐂀 1 𐂁 2 𐀒𐀷 1 𐀒𐀺 1"

# Test LB.R.6
# Scenario: Check that blank spaces after * and before and after '+' are removed in regularized scenarios.
# Requirements mapping:
    # LB.1: Tokenise each blank space and use to distinguish individual words. Represent as is in both annotated and regularised output.
        #   The only exceptions to this is if a space appears after '*', before/after '+', or before a '.'  in an annotation (e.g. 'lat .'); spaces in these instances should be removed in both the annotated and regularized outputs.

    "]qa-ra / re-me-to * 168 + SE 28" : "%𐀣𐀨 𐀩𐀕𐀵 𐂰+𐀮 28"

# Test LB.R.7
# Scenario: Check that '\u2082' is correctly handled as a subscript '2' in regularized scenarios
# Requirements mapping:
    # ADD REQUIREMENT

    "da-pu\u2082-ri-to-jo , / po-ti-ni-ja 'me-ri' * 209 VAS 1" : "𐀅𐁆𐀪𐀵𐀍 𐀡𐀴𐀛𐀊 𐀕𐀪 𐃨 1"

# Test LB.R.8
# Scenario: Check that Scott brackets (i.e. '⟦' and '⟧', or \u27e6 and \u27e7), and any characters they enclose, are not printed in regularized scenarios.
# Requirements mapping:
    # LB.12: Tokenise each instance of Scott brackets (i.e. '⟦' and '⟧', or '\u27e6' and '\u27e7'). Represent these symbols as is in the annotated output. Do not include these symbols, or any other text that they contain, in the reguarised ouput.
 
    "po-*34-wi-do \u27e6TUN\u27e7 BIG[" : "𐀡𐁓𐀹𐀈 𐃌%"

# Test LB.R.9
# Scenario: Check that 'inf. mut.' is not printed in regularized scenarios.
# Requirements mapping:
    # LB.15: Tokenise each instance of 'inf.' and 'mut.'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "inf . mut ." : ""
 
# Test LB.R.10
# Scenario: Check that 'vacat' is not printed in regularized scenarios.
# Requirements mapping:
    # LB.17: Tokenise each instance of 'vacat'. Represent this text as is in the annotated output, but do not include in the regularised output.
    
    "] vacat [" : ""

# Test LB.R.11
# Scenario: Check that 'vest.' is handled as a wildcard, and 'vac.' is not printed in regularized scenarios.
# Requirements mapping:
    # LB.16: Tokenise each instance of 'vac.'. Represent this text as is in the annotated output, but do not include in the regularised output.
    # LB.18: Tokenise each instance of 'vest.'. Represent this text as is in the annotated output, and represent as wildcard (i.e. '%') in regularised output.
    # What about '\u00a0'?
    
    "] vest ., / su-ri-mo , u-ta-jo-jo , o OVIS m 85[\u00a0] vac ." : "% % 𐀱𐀪𐀗 𐀄𐀲𐀍𐀍 𐀃 𐂇 85% %"

# Test LB.R.12
# Scenario: Check that 'vestigia?' is handled as a wildcard in regularized scenarios.
# Requirements mapping:
    # LB.19: Tokenise each instance of 'vestigia' or 'vestigia?'. Represent this text as is in the annotated output, and represent as wildcard (i.e. '%') in regularised output.

    "su-ma-no / ti-ri-to [ vestigia? ] vacat" : "𐀱𐀔𐀜 𐀴𐀪𐀵 % % %"

# Test LB.R.13
# Scenario: Check that 'v.' is not printed in regularized scenarios.
# Requirements mapping:
    # LB.28: Tokenise each instance of 'v.'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "v." : ""

# Test LB.R.14
# Scenario: Check that blank spaces are removed before the full stop for 'l .' and 's .', and that the resulting 'l.' and 's.' are not printed in regularized scenarios.
# Requirements mapping:
    # LB.1: Tokenise each blank space and use to distinguish individual words. Represent as is in both annotated and regularised output.
         # The only exceptions to this is if a space appears after '*', before/after '+', or before a '.'  in an annotation (e.g. 'lat .'); spaces in these instances should be removed in both the annotated and regularized outputs.
    # LB.35: Tokenise each instance of 'l.'. Represent this text as is in the annotated output, but do not include in the regularised output.
    # LB.37: Tokenise each instance of 's.'. Represent this text as is in the annotated output, but do not include in the regularised output.
 
    "l . s .": ""

# Test LB.R.15
# Scenario: Check that 'lat.' and 'inf.' are not printed in regularized scenarios.
# Requirements mapping:
    # LB.36: Tokenise each instance of 'lat.'. Represent this text as is in the annotated output, but do not include in the regularised output.
    # LB.40: Tokenise each instance of 'inf.'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "] ⟦*209VAS+A 270⟧-[ v.↓ ]-290 KE 200-[ lat. inf. ]-ku-do-ni-jo , [" : "% % %290 𐀐 200% %𐀓𐀈𐀛𐀍 %"

    "l\u0323a\u0323t\u0323 . i\u0323n\u0323f\u0323 .": ""

# Test LB.R.16
# Scenario: Check that blank spaces are removed before the full stop for 'l .' and 'i .', and that the resulting 'l.' and 'i.' are not printed in regularized scenarios.
# Requirements mapping:
    # LB.1: Tokenise each blank space and use to distinguish individual words. Represent as is in both annotated and regularised output.
          # The only exceptions to this is if a space appears after '*', before/after '+', or before a '.'  in an annotation (e.g. 'lat .'); spaces in these instances should be removed in both the annotated and regularized outputs.
    # LB.35: Tokenise each instance of 'l.'. Represent this text as is in the annotated output, but do not include in the regularised output.
    # LB.39: Tokenise each instance of 'i.'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "l . i .": ""

# Test LB.R.17
# Scenario: Check that 'Graffito' is not printed in regularized scenarios.
# Requirements mapping:
    # LB.25: Tokenise each instance of 'Graffito'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "] Graffito [": ""

# Test LB.R.18
# Scenario: Check that '?' is not printed in regularized scenarios.
# Requirements mapping:
    # LB.11: Tokenise each instance of '?'. Represent this symbol as is in the annotated output, but do not include in the regularised output.

    "i[-qi-ja?": "𐀂%𐀥𐀊"

# Test LB.R.19
# Scenario: Check that the space is removed after the '+' sign, and the correct sign is printed in the regularized scenario.
# Requirements mapping:
    # LB.1: Tokenise each blank space and use to distinguish individual words. Represent as is in both annotated and regularised output.
          # The only exceptions to this is if a space appears after '*', before/after '+', or before a '.'  in an annotation (e.g. 'lat .'); spaces in these instances should be removed in both the annotated and regularized outputs.
    
    "]r\u0323o\u0323 , / da-mo GRA [ ]8 OLIV+ A 12" : "%𐀫 𐀅𐀗 𐂎 % %8 𐂐+𐀀 12"

# Test LB.R.20
# Scenario: Check that '\u2083' is correctly handled as a subscript '2' in regularized scenarios
# Requirements mapping:
    # ADD REQUIREMENT
    
    "pu-ri / a\u2083-zo-ro-qe , po-da-ko-qe BOS m ZE 1[" :  "𐀢𐀪 𐁁𐀿𐀫𐀤 𐀡𐀅𐀒𐀤 𐂍 𐀽 1%"

# Test LB.R.21
# Scenario: Check that 'deest' is not printed in regularized scenarios.
# Requirements mapping:
    # LB.23: Tokenise each instance of 'deest'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "] deest [" : ""
    
# Test LB.R.22
# Scenario: Check that half brackets (i.e. i.e. ' ⌞' and '⌟', or '\u2e24' and '\u2e25') are not printed in regularized scenarios.
# Requirements mapping:
    # LB.13: Tokenise each instance of half brackets (i.e. ' ⌞' and '⌟', or '\u2e24' and '\u2e25'). Represent these symbols as is in the annotated output. Do not include these symbols in the reguarised ouput.
    
    "du-to\u2e24 \u2e25 / r\u0323u\u0323-ki-to" : "𐀉𐀵 𐀬𐀑𐀵"

# Test LB.R.23
# Scenario: Check that '[•]' is treated as a single wildcard (i.e. '%')
# Requirements mapping:
    # LB.42: Tokenise each instance of '[•]'. Represent this symbol as is in the annotated output, and represent as a single wildcard (i.e. '%') in regularised output.

    "]po-[\u2022] , / [ OVIS m ] 40 o OVIS m 20" : "%𐀡% % 𐂇 % 40 𐀃 𐂇 20"

# Test LB.R.24
# Scenario: Check that spaces are removed before and after '+' and the correct sign/s are printed in regularized scenarios.
# Requirements mapping:
    # LB.1: Tokenise each blank space and use to distinguish individual words. Represent as is in both annotated and regularised output.
        #   The only exceptions to this is if a space appears after '*', before/after '+', after TELA, or before a '.'  in an annotation (e.g. 'lat .'); spaces in these instances should be removed in both the annotated and regularized outputs.
    
    "ME + RI *211 VAS + PO 1[" : "𐂙 𐃪+𐂓 1%"

# Test LB.R.25
# Scenario: Check that spaces are removed after 'TELA' and the correct sign/s are printed in regularized scenarios.
# Requirements mapping:
    # LB.1: Tokenise each blank space and use to distinguish individual words. Represent as is in both annotated and regularised output.
        #   The only exceptions to this is if a space appears after '*', before/after '+', after TELA, or before a '.'  in an annotation (e.g. 'lat .'); spaces in these instances should be removed in both the annotated and regularized outputs.

    "] * 161 TELA 2 [" : "% 𐂩 𐂧² %"

# Test LB.R.26
# Scenario: Check that spaces are removed both after 'TELA' and before and after '+' and the correct sign/s are printed in regularized scenarios.
# Requirements mapping:
    # LB.1: Tokenise each blank space and use to distinguish individual words. Represent as is in both annotated and regularised output.
        #   The only exceptions to this is if a space appears after '*', before/after '+', after TELA, or before a '.'  in an annotation (e.g. 'lat .'); spaces in these instances should be removed in both the annotated and regularized outputs.

    "do-ti-ja TELA 2 + PU 5\u03230[" : "𐀈𐀴𐀊 𐂧²+𐀢 50%"

# Test LB.R.27
# Scenario: Check that 'v.↓' is not printed in regularized scenarios.
# Requirements mapping:
    # LB.30: Abbreviated form of verso, indicates the reverse side of the tablet, when inscribed. Arrow indicates direction that record is rotated to reach verso.
    "qe-te-o TELA;2-[ po-po TELA;2 4 [ v.↓ ⟦a-mi-si-ja TELA;1 12⟧ [" : "𐀤𐀳𐀃 𐂧²% 𐀡𐀡 𐂧² 4 % %"

# Test LB.R.28
# Scenario: Check that 'fragmentum A' and 'fragmentum B', and checkmarks (i.e. 'X') are not printed in regularized scenarios. 
# Requirements mapping:
    # LB.55: ADD DESCRIPTION
    # LB.56: ADD DESCRIPTION
    # LB.34: Tokenise each instance of 'X'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "fragmentum A sup. mut. ] X MUL 1 ]--u-ra MUL 1 X ]-na MUL 1 tu-ka-na X MUL 1 ]-ma MUL 1 te-qa-ja MUL 1 ]-ja MUL 1-[ ]-ja-mu-ta MUL 1-[ ]--ta2-no-[ inf. mut." : "% 𐂁 1 %𐀄𐀨 𐂁 1 %𐀙 𐂁 1 𐀶𐀏𐀙 𐂁 1 %𐀔 𐂁 1 𐀳𐀣𐀊 𐂁 1 %𐀊 𐂁 1% %𐀊𐀘𐀲 𐂁 1% %𐁋𐀜%"

# Test LB.R.29
# Scenario: Check that 'v.→' is not printed in regularized scenarios.
# Requirements mapping:
    # LB.31: Tokenise each instance of 'v.→'. Represent this text as is in the annotated output, but do not include in the regularised output.

    "ne-wo , za-we-[ v.→ ] a-ro-we a-nu-to" : "𐀚𐀺 𐀼𐀸% % 𐀀𐀫𐀸 𐀀𐀝𐀵"

# Test LB.U.33
# Scenario: Check that '<' and '>' are not printed in annregularized scenarios.
# Requirements mapping:
    # LB.27: Tokenise each instance of angle brackets (i.e. '<' and '>'). Represent this text as is in the annotated output. Do not include these symbols, or any other text that they contain, in the reguarised ouput.
    
    "] <OVIS:m> 69 OVIS:f 30 [ ]-e-ke-me-de , / tu-ni-ja , pa OVIS:m 1" : "% 𐂇 69 𐂆 30 % %𐀁𐀐𐀕𐀆 𐀶𐀛𐀊 𐀞 𐂇 1" # https://liber.cnr.it/tablet/view/3172?wl=12765
    
    #Error
    "]-o-pe-ro *209VAS 'ME<±RI>' 5 [" : "%𐀃𐀟𐀫 𐃨 𐂙 5" # https://liber.cnr.it/tablet/view/4215?wl=23278

# Test LB.U.34
# Checking mapping of 'ME±RI'
# Error - Mapping issue? 
    "]-i-to , / da-nwa ME±RI *209VAS+A 16 *172 8" : "%𐀂𐀵 𐀅𐁅 𐂙 𐃨+𐀀 16 𐂴 8"

# Test LB.U.35
# Scenario: Check that single quotation marks are not printed in regularized scenarios.
# Requirements mapping:
    # LB.7: Tokenise each instance of single quotation marks (i.e. '''). Represent this symbol as is in the annotated output, but do not include in regularised output.

    "pa-si-te-o-i / me-ri *209VAS 1 da-pu2-ri-to-jo , / po-ti-ni-ja 'me-ri' *209VAS 1" : "𐀞𐀯𐀳𐀃𐀂 𐀕𐀪 𐃨 1 𐀅𐁆𐀪𐀵𐀍 𐀡𐀴𐀛𐀊 𐀕𐀪 𐃨 1"

# Test LB.U.36
# Scenario: Check that '--' is treated the same as as '-' in regularized scenarios.
# Requirements mapping:
    # LB.3: Tokenise each instance of '--' as '-' and use to recognise whole words in encoding, but do not represent this symbol in either the annotated or the regularised output.
    "a-ka--[ ]--jo-jo , me-no-[ da-pu2-ri-[-to-jo ]-po-ti-ni-ja ri *166+WE 22-[" : "𐀀𐀏% %𐀍𐀍 𐀕𐀜% 𐀅𐁆𐀪%𐀵𐀍 %𐀡𐀴𐀛𐀊 𐀪 𐂮+𐀸 22%" # https://liber.cnr.it/tablet/view/124
    
# Test LB.U.39
# Test TELAs
    "]-a-ro2-e TELA;3+PU [ ] me-sa-ta , TELA;x+PU-[" : "%𐀀𐁊𐀁 𐂧³+𐀢 % % 𐀕𐀭𐀲 𐂧ˣ+𐀢%"

# Test LB.U.40
# Ignore ● = 'puncta'
# Convert [•~•] to '%%'
     # https://liber.cnr.it/tablet/view/4230?wl=23478,23481,23485
    "[•~•] [ wi-tu-ri-jo , / a-mo-te-re [" : "%% % 𐀹𐀶𐀪𐀍 𐀀𐀗𐀳𐀩 %"

# Test LB.U.41
# Ignore '</em>' >> how does this work? Will it ignore other HTML if it comes through?
# Convert fragmentum to '%'
# Ignore 'A' and 'B' 
# Ignore vacat
# Error
    "fragmentum A fragmentum B sup. mut. sup. mut.</em> ]--to-[ ]-da-*22-to HORD [ ] 'da-*22-to' HORD 2 da-]-*22-to HORD-[ ]--ro 'da-*22-to' HORD 2 inf. mut. ]--ri 'da-*22-to' HORD 2 ] vac. inf. mut." : "%𐀵% %𐀅𐁒𐀵 𐂏 % % 𐀅𐁒𐀵 𐂏 2 𐀅%𐁒𐀵 𐂏% %𐀫 𐀅𐁒𐀵 𐂏 2 %𐀪 𐀅𐁒𐀵 𐂏 2 %"
# Error
    "fragmentum A fragmentum B vacat [ sup. mut. e-me-si-jo-jo-[ ] 3-[ pa-na-so GRA 100-[ ]-vac.-[ ta-ra-qo GRA [ inf. mut. ta-u-pa-du-we GRA-[ a-ro-ja-[ pu-na-so-[ inf. mut." : "% 𐀁𐀕𐀯𐀍𐀍% % 3% 𐀞𐀙𐀰 𐂎 100% %% 𐀲𐀨𐀦 𐂎 % 𐀲𐀄𐀞𐀉𐀸 𐂎% 𐀀𐀫𐀊% 𐀢𐀙𐀰%"

# Test LB.U.44
# Mid-word ']'
    "po-]-ki-ro-nu-ka , '*161' TELA;2 3 ki-ri-ta , / e-ru-ta-ra-pi , *161 TELA;3 [ ] e-ru-ta-ra-pi [ ]-TELA;x 2 ke-ro-ta , / *161 ki-to-na TELA;x-[" : "𐀡%𐀑𐀫𐀝𐀏 𐂩 𐂧² 3 𐀑𐀪𐀲 𐀁𐀬𐀲𐀨𐀠 𐂩 𐂧³ % % 𐀁𐀬𐀲𐀨𐀠 % %𐂧ˣ 2 𐀐𐀫𐀲 𐂩 𐀑𐀵𐀙 𐂧ˣ%"

# Test LB.U.45
# Test 'o'
    "]-jo-zo CROC P 3 o P 6-[" : "%𐀍𐀿 𐁉 𐄺 3 𐀃 𐄺 6%"

# Test LB.U.46
# Ignore 'reliqua pars sine regulis'
    "sup. mut. ]-vest.-[ ]-na-ro GRA 5 ]--do-we-i , ma-so-qe GRA 8 ] vac. ] GRA 402 OLIV+A 52 reliqua pars sine regulis" : "%%% %𐀙𐀫 𐂎 5 %𐀈𐀸𐀂 𐀔𐀰𐀤 𐂎 8 % % 𐂎 402 𐂐+𐀀 52"

# Test LB.U.47
# Ignore 'supra sigillum'
    "RU supra sigillum" : "𐀬"

# Test LB.U.48
# Convert '•' to '%', and '~'' to '-'
# Convert '--' to '-'
# Closed sqaure brackets with text inside and no spaces are ignored, e.g. '[•~•~•~•]' becomes '%%%%' and [o-]-pi becomes '𐀃𐀠'
# However, square brackets that are not closed/have spaces between, are still treated as wildcards 'i-[-jo ]-wo' becomes '𐀂%𐀍 %𐀺', and 'a-[ ]' becomes '𐀀% %' 
# Complicated text because of annotations (mainly 'ijo')
# https://liber.cnr.it/tablet/view/697
# Error
    "sup. mut. ] i-[-jo ]-wo , a-[ ] wa-du-na , [•~•~•~•] ]--to , e-[ ] vac. ]-sa-ka-ri-jo , [ ] vac. i-jo i-jo [o-]-pi / di-zo , pi-ma-na-ro , zo-wi-jo 1 a-tu-qo-te-ra-to 1-[ i-jo o-pi / ri-zo , pi-ma-na-ro pi-ro-i-ta 1 o-pi / pa-ka , di-wa-jo 1 ]-pi / o-na-se-u 1 ri--[ ]-wi-du 1 ke--[ ]-za-[ inf. mut." : "% 𐀂%𐀍 %𐀺 𐀀% % 𐀷𐀉𐀙 %%%% %𐀵 𐀁% % %𐀭𐀏𐀪𐀍 % % 𐀂𐀍 𐀂𐀍 %𐀃%𐀠 𐀇𐀿 𐀠𐀔𐀙𐀫 𐀿𐀹𐀍 1 𐀀𐀶𐀦𐀳𐀨𐀵 1% 𐀂𐀍 𐀃𐀠 𐀪𐀿 𐀠𐀔𐀙𐀫 𐀠𐀫𐀂𐀲 1 𐀃𐀠 𐀞𐀏 𐀇𐀷𐀍 1 %𐀠 𐀃𐀙𐀮𐀄 1 𐀪% %𐀹𐀉 1 𐀐% %𐀼%"

# Test LB.U.49
# Ignore 'α', 'β', 'γ', 'supra sigillum'
    "α JAC supra sigillum β o-pa γ pa-ta-ja" : "𐃘 𐀃𐀞 𐀞𐀲𐀊"

# Test LB.U.50
    # HELP
    #    "sup. mut. ?OVIS]-:m ["
    # "]-si 1 tu 1 ki-zo 1 MUL 3 TELA-[;1+TE ]-a-ma-no--[ ]-1 o-ri-mo MUL 3 TELA;1+TE 1 pu-zo , ti-no , pi-ja-mu-nu MUL-[ ]-ni-ta , o-sa-po-to MUL 3 TELA-[;1]-+TE 1 [ ] vac. ["

# Test LB.U.51
# Ignore CMS seal impression annotations e.g. 'CMS VS1B 049' >> This is the only case.
    "α A supra sigillum CMS VS1B 049 β a-pe-we-de" : "𐀀 𐀀𐀟𐀸𐀆"

# Test LB.U.52
# Ignore 'deest'
    "sup. mut. ]-deest-[ inf. mut." : ""

# Test LB.U.53
    "HORD T 1 NI V 3 FAR V 2 VIN V 2 a-ro-do-ro-o , / wa-ke-ta , HORD T 1 NI V 3 OLE V 1 v.↓ ME±RI Z 2" : "𐂏 𐄼 1 𐀛 𐄾 3 𐀎 𐄾 2 𐂖 𐄾 2 𐀀𐀫𐀈𐀫𐀃 𐀷𐀐𐀲 𐂏 𐄼 1 𐀛 𐄾 3 𐂕 𐄾 1 𐂙 𐄿 2"

# Test LB.U.54
    # Treat qs (quantum sufficit) as a wildcard
    "]-ke-ke-me-na-[ , ko-]-to-na GRA qs ] vac." : "%𐀐𐀐𐀕𐀙% 𐀒%𐀵𐀙 𐂎 % %"

# Test LB.U.55
# Ignore ⌞ and ⌟
    "e-ke-qe ]-o-na-to , ke-ke-me-na⌞ ⌟ko-to-na GRA qs ] vac.": "𐀁𐀐𐀤 %𐀃𐀙𐀵 𐀐𐀐𐀕𐀙 𐀒𐀵𐀙 𐂎 % %"







